name: Weekly Build

on:
  workflow_dispatch:
  schedule:
    # Runs at 18:00 UTC on Sun (JST: AM 03:00 on every Monday)
    - cron: '0 18 * * SUN'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  automated_build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Pull official base image with trust
        run: docker pull golang:alpine

      - name: Fetch tags unshallow and prune
        run: git fetch --prune --unshallow --tags

      - name: Get info of tag and image
        id: info
        run: |
          : # Get date (YYMMDD)
          echo "::set-output name=date::$(date +'%Y%m%d')"
          : # Base image name (lower case)
          img_name="$(echo ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')"
          echo "::set-output name=img_name::${img_name}"
          : # Git tag as version
          ver_raw="$(git describe --tags)"
          ver_long="$ver_raw"
          ver_short="$(echo "$ver_raw" | grep -o -E "(v[0-9]+\.){1}[0-9]+(\.[0-9]+)?" | head -n1)"
          echo "::set-output name=ver_long::${ver_long}"
          echo "::set-output name=ver_short::${ver_short}"
          : # Docker image tag
          tag_latest="${img_name}:latest"
          tag_version="${img_name}:${ver_short}"
          echo "::set-output name=tag_latest::${tag_latest}"
          echo "::set-output name=tag_version::${tag_version}"

      - name: Print info
        run: |
          echo "Build date: ${{ steps.info.outputs.date }}"
          echo "Img name  : ${{ steps.info.outputs.img_name }}"
          echo "Ver(long) : ${{ steps.info.outputs.ver_long }}"
          echo "Ver(short): ${{ steps.info.outputs.ver_short }}"
          echo "Img tag latest : ${{ steps.info.outputs.tag_latest }}"
          echo "Img tag version: ${{ steps.info.outputs.tag_version }}"

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ steps.info.outputs.tag_latest }}
          build-args: |
            VERSION="${{ steps.info.outputs.ver_long }}"
            TAG_BUILD="(Build: ${{ steps.info.outputs.date }})"

      - name: Update info
        run: ./update-info.sh
